// Code generated by go-swagger; DO NOT EDIT.

package conditions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new conditions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for conditions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteConditionID(params *DeleteConditionIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteConditionIDNoContent, error)

	GetConditionID(params *GetConditionIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetConditionIDOK, error)

	GetConditionStatusID(params *GetConditionStatusIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetConditionStatusIDOK, error)

	ListConditionsForStreamID(params *ListConditionsForStreamIDParams, authInfo runtime.ClientAuthInfoWriter) (*ListConditionsForStreamIDOK, error)

	ListConditionsID(params *ListConditionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*ListConditionsIDOK, error)

	PatchConditionID(params *PatchConditionIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchConditionIDOK, error)

	PostConditionID(params *PostConditionIDParams, authInfo runtime.ClientAuthInfoWriter) (*PostConditionIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteConditionID deletes condition

  Deletes an existing condition
*/
func (a *Client) DeleteConditionID(params *DeleteConditionIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteConditionIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConditionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteConditionID",
		Method:             "DELETE",
		PathPattern:        "/{organization}/projects/{project}/conditions/{condition-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteConditionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteConditionIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteConditionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConditionID gets condition

  Returns information about a specific condition
*/
func (a *Client) GetConditionID(params *GetConditionIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetConditionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConditionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConditionID",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/conditions/{condition-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetConditionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConditionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConditionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConditionStatusID gets condition status

  Returns status information about a specific condition
*/
func (a *Client) GetConditionStatusID(params *GetConditionStatusIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetConditionStatusIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConditionStatusIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConditionStatusID",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/conditions/{condition-id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetConditionStatusIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConditionStatusIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConditionStatusID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListConditionsForStreamID lists conditions for stream

  Returns information about all conditions in a specific stream
*/
func (a *Client) ListConditionsForStreamID(params *ListConditionsForStreamIDParams, authInfo runtime.ClientAuthInfoWriter) (*ListConditionsForStreamIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListConditionsForStreamIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listConditionsForStreamID",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/searches/{stream-id}/conditions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListConditionsForStreamIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListConditionsForStreamIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listConditionsForStreamID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListConditionsID lists conditions

  Returns information about all conditions in a project
*/
func (a *Client) ListConditionsID(params *ListConditionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*ListConditionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListConditionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listConditionsID",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/conditions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListConditionsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListConditionsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listConditionsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchConditionID updates condition

  Modifies the settings for an existing condition
*/
func (a *Client) PatchConditionID(params *PatchConditionIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchConditionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchConditionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchConditionID",
		Method:             "PATCH",
		PathPattern:        "/{organization}/projects/{project}/conditions/{condition-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchConditionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchConditionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchConditionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostConditionID creates condition

  Creates a new condition
*/
func (a *Client) PostConditionID(params *PostConditionIDParams, authInfo runtime.ClientAuthInfoWriter) (*PostConditionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostConditionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postConditionID",
		Method:             "POST",
		PathPattern:        "/{organization}/projects/{project}/conditions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostConditionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostConditionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postConditionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
