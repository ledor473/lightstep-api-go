// Code generated by go-swagger; DO NOT EDIT.

package conditions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// PatchConditionIDReader is a Reader for the PatchConditionID structure.
type PatchConditionIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConditionIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchConditionIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConditionIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConditionIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConditionIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchConditionIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchConditionIDOK creates a PatchConditionIDOK with default headers values
func NewPatchConditionIDOK() *PatchConditionIDOK {
	return &PatchConditionIDOK{}
}

/*PatchConditionIDOK handles this case with default header values.

The condition was updated successfully
*/
type PatchConditionIDOK struct {
}

func (o *PatchConditionIDOK) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/conditions/{condition-id}][%d] patchConditionIdOK ", 200)
}

func (o *PatchConditionIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchConditionIDBadRequest creates a PatchConditionIDBadRequest with default headers values
func NewPatchConditionIDBadRequest() *PatchConditionIDBadRequest {
	return &PatchConditionIDBadRequest{}
}

/*PatchConditionIDBadRequest handles this case with default header values.

One or more parameter(s) are not valid
*/
type PatchConditionIDBadRequest struct {
}

func (o *PatchConditionIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/conditions/{condition-id}][%d] patchConditionIdBadRequest ", 400)
}

func (o *PatchConditionIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchConditionIDUnauthorized creates a PatchConditionIDUnauthorized with default headers values
func NewPatchConditionIDUnauthorized() *PatchConditionIDUnauthorized {
	return &PatchConditionIDUnauthorized{}
}

/*PatchConditionIDUnauthorized handles this case with default header values.

The API Key does not provide access to this resource, or the organization name does not exist
*/
type PatchConditionIDUnauthorized struct {
}

func (o *PatchConditionIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/conditions/{condition-id}][%d] patchConditionIdUnauthorized ", 401)
}

func (o *PatchConditionIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchConditionIDNotFound creates a PatchConditionIDNotFound with default headers values
func NewPatchConditionIDNotFound() *PatchConditionIDNotFound {
	return &PatchConditionIDNotFound{}
}

/*PatchConditionIDNotFound handles this case with default header values.

Project name is not found
*/
type PatchConditionIDNotFound struct {
}

func (o *PatchConditionIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/conditions/{condition-id}][%d] patchConditionIdNotFound ", 404)
}

func (o *PatchConditionIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchConditionIDInternalServerError creates a PatchConditionIDInternalServerError with default headers values
func NewPatchConditionIDInternalServerError() *PatchConditionIDInternalServerError {
	return &PatchConditionIDInternalServerError{}
}

/*PatchConditionIDInternalServerError handles this case with default header values.

Condition identifier not found
*/
type PatchConditionIDInternalServerError struct {
}

func (o *PatchConditionIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/conditions/{condition-id}][%d] patchConditionIdInternalServerError ", 500)
}

func (o *PatchConditionIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
