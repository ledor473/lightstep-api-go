// Code generated by go-swagger; DO NOT EDIT.

package conditions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// PostConditionIDReader is a Reader for the PostConditionID structure.
type PostConditionIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostConditionIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostConditionIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPostConditionIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostConditionIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostConditionIDOK creates a PostConditionIDOK with default headers values
func NewPostConditionIDOK() *PostConditionIDOK {
	return &PostConditionIDOK{}
}

/*PostConditionIDOK handles this case with default header values.

The condition was created successfully
*/
type PostConditionIDOK struct {
}

func (o *PostConditionIDOK) Error() string {
	return fmt.Sprintf("[POST /{organization}/projects/{project}/conditions][%d] postConditionIdOK ", 200)
}

func (o *PostConditionIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostConditionIDUnauthorized creates a PostConditionIDUnauthorized with default headers values
func NewPostConditionIDUnauthorized() *PostConditionIDUnauthorized {
	return &PostConditionIDUnauthorized{}
}

/*PostConditionIDUnauthorized handles this case with default header values.

The API Key does not provide access to this resource, or the organization name does not exist
*/
type PostConditionIDUnauthorized struct {
}

func (o *PostConditionIDUnauthorized) Error() string {
	return fmt.Sprintf("[POST /{organization}/projects/{project}/conditions][%d] postConditionIdUnauthorized ", 401)
}

func (o *PostConditionIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostConditionIDNotFound creates a PostConditionIDNotFound with default headers values
func NewPostConditionIDNotFound() *PostConditionIDNotFound {
	return &PostConditionIDNotFound{}
}

/*PostConditionIDNotFound handles this case with default header values.

Project name is not found
*/
type PostConditionIDNotFound struct {
}

func (o *PostConditionIDNotFound) Error() string {
	return fmt.Sprintf("[POST /{organization}/projects/{project}/conditions][%d] postConditionIdNotFound ", 404)
}

func (o *PostConditionIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
