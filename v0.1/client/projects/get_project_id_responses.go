// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// GetProjectIDReader is a Reader for the GetProjectID structure.
type GetProjectIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProjectIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProjectIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetProjectIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetProjectIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetProjectIDOK creates a GetProjectIDOK with default headers values
func NewGetProjectIDOK() *GetProjectIDOK {
	return &GetProjectIDOK{}
}

/*GetProjectIDOK handles this case with default header values.

JSON-formatted metadata about all projects in the project
*/
type GetProjectIDOK struct {
}

func (o *GetProjectIDOK) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}][%d] getProjectIdOK ", 200)
}

func (o *GetProjectIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProjectIDUnauthorized creates a GetProjectIDUnauthorized with default headers values
func NewGetProjectIDUnauthorized() *GetProjectIDUnauthorized {
	return &GetProjectIDUnauthorized{}
}

/*GetProjectIDUnauthorized handles this case with default header values.

The API Key does not provide access to this resource, or the organization name does not exist
*/
type GetProjectIDUnauthorized struct {
}

func (o *GetProjectIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}][%d] getProjectIdUnauthorized ", 401)
}

func (o *GetProjectIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProjectIDNotFound creates a GetProjectIDNotFound with default headers values
func NewGetProjectIDNotFound() *GetProjectIDNotFound {
	return &GetProjectIDNotFound{}
}

/*GetProjectIDNotFound handles this case with default header values.

Project name is not found
*/
type GetProjectIDNotFound struct {
}

func (o *GetProjectIDNotFound) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}][%d] getProjectIdNotFound ", 404)
}

func (o *GetProjectIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
