// Code generated by go-swagger; DO NOT EDIT.

package dashboards

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// GetDashboardIDReader is a Reader for the GetDashboardID structure.
type GetDashboardIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDashboardIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDashboardIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetDashboardIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDashboardIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDashboardIDOK creates a GetDashboardIDOK with default headers values
func NewGetDashboardIDOK() *GetDashboardIDOK {
	return &GetDashboardIDOK{}
}

/*GetDashboardIDOK handles this case with default header values.

JSON-formatted metadata about the dashboard
*/
type GetDashboardIDOK struct {
}

func (o *GetDashboardIDOK) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}/dashboards/{dashboard-id}][%d] getDashboardIdOK ", 200)
}

func (o *GetDashboardIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDashboardIDUnauthorized creates a GetDashboardIDUnauthorized with default headers values
func NewGetDashboardIDUnauthorized() *GetDashboardIDUnauthorized {
	return &GetDashboardIDUnauthorized{}
}

/*GetDashboardIDUnauthorized handles this case with default header values.

The API Key does not provide access to this resource, or the organization name does not exist
*/
type GetDashboardIDUnauthorized struct {
}

func (o *GetDashboardIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}/dashboards/{dashboard-id}][%d] getDashboardIdUnauthorized ", 401)
}

func (o *GetDashboardIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDashboardIDNotFound creates a GetDashboardIDNotFound with default headers values
func NewGetDashboardIDNotFound() *GetDashboardIDNotFound {
	return &GetDashboardIDNotFound{}
}

/*GetDashboardIDNotFound handles this case with default header values.

Project name or dashboard ID is not found
*/
type GetDashboardIDNotFound struct {
}

func (o *GetDashboardIDNotFound) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}/dashboards/{dashboard-id}][%d] getDashboardIdNotFound ", 404)
}

func (o *GetDashboardIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
