// Code generated by go-swagger; DO NOT EDIT.

package streams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// PostSearchReader is a Reader for the PostSearch structure.
type PostSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPostSearchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostSearchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostSearchOK creates a PostSearchOK with default headers values
func NewPostSearchOK() *PostSearchOK {
	return &PostSearchOK{}
}

/*PostSearchOK handles this case with default header values.

The stream was created (or updated) successfully
*/
type PostSearchOK struct {
	Payload interface{}
}

func (o *PostSearchOK) Error() string {
	return fmt.Sprintf("[POST /{organization}/projects/{project}/searches][%d] postSearchOK  %+v", 200, o.Payload)
}

func (o *PostSearchOK) GetPayload() interface{} {
	return o.Payload
}

func (o *PostSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSearchUnauthorized creates a PostSearchUnauthorized with default headers values
func NewPostSearchUnauthorized() *PostSearchUnauthorized {
	return &PostSearchUnauthorized{}
}

/*PostSearchUnauthorized handles this case with default header values.

The API Key does not provide access to this resource, or the organization name does not exist
*/
type PostSearchUnauthorized struct {
	Payload interface{}
}

func (o *PostSearchUnauthorized) Error() string {
	return fmt.Sprintf("[POST /{organization}/projects/{project}/searches][%d] postSearchUnauthorized  %+v", 401, o.Payload)
}

func (o *PostSearchUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *PostSearchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSearchNotFound creates a PostSearchNotFound with default headers values
func NewPostSearchNotFound() *PostSearchNotFound {
	return &PostSearchNotFound{}
}

/*PostSearchNotFound handles this case with default header values.

Project name is not found
*/
type PostSearchNotFound struct {
	Payload interface{}
}

func (o *PostSearchNotFound) Error() string {
	return fmt.Sprintf("[POST /{organization}/projects/{project}/searches][%d] postSearchNotFound  %+v", 404, o.Payload)
}

func (o *PostSearchNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *PostSearchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
