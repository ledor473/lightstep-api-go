// Code generated by go-swagger; DO NOT EDIT.

package streams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new streams API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for streams API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteSearchID(params *DeleteSearchIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSearchIDNoContent, error)

	GetStreamID(params *GetStreamIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetStreamIDOK, error)

	ListStreamsID(params *ListStreamsIDParams, authInfo runtime.ClientAuthInfoWriter) (*ListStreamsIDOK, error)

	PatchSearchID(params *PatchSearchIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchSearchIDOK, error)

	PostSearchID(params *PostSearchIDParams, authInfo runtime.ClientAuthInfoWriter) (*PostSearchIDOK, error)

	TimeseriesID(params *TimeseriesIDParams, authInfo runtime.ClientAuthInfoWriter) (*TimeseriesIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteSearchID deletes stream

  Deletes an existing stream
*/
func (a *Client) DeleteSearchID(params *DeleteSearchIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSearchIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSearchIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSearchID",
		Method:             "DELETE",
		PathPattern:        "/{organization}/projects/{project}/searches/{stream-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSearchIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSearchIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSearchID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStreamID gets stream

  Returns information about a specific stream
*/
func (a *Client) GetStreamID(params *GetStreamIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetStreamIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStreamIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStreamID",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/searches/{stream-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStreamIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStreamIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStreamID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListStreamsID lists streams

  Returns information about all streams in a project
*/
func (a *Client) ListStreamsID(params *ListStreamsIDParams, authInfo runtime.ClientAuthInfoWriter) (*ListStreamsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStreamsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStreamsID",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/searches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListStreamsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStreamsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listStreamsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchSearchID updates stream

  Modifies the settings for an existing stream
*/
func (a *Client) PatchSearchID(params *PatchSearchIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchSearchIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSearchIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSearchID",
		Method:             "PATCH",
		PathPattern:        "/{organization}/projects/{project}/searches/{stream-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchSearchIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchSearchIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchSearchID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostSearchID creates stream

  Creates a new stream (or updates an existing stream if the query is identical)
*/
func (a *Client) PostSearchID(params *PostSearchIDParams, authInfo runtime.ClientAuthInfoWriter) (*PostSearchIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSearchIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSearchID",
		Method:             "POST",
		PathPattern:        "/{organization}/projects/{project}/searches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostSearchIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSearchIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postSearchID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimeseriesID timeseries

  Returns timeseries data for a stream
*/
func (a *Client) TimeseriesID(params *TimeseriesIDParams, authInfo runtime.ClientAuthInfoWriter) (*TimeseriesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeseriesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "timeseriesID",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/searches/{stream-id}/timeseries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TimeseriesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeseriesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for timeseriesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
