// Code generated by go-swagger; DO NOT EDIT.

package streams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// PatchSearchIDReader is a Reader for the PatchSearchID structure.
type PatchSearchIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchSearchIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchSearchIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchSearchIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchSearchIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchSearchIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchSearchIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchSearchIDOK creates a PatchSearchIDOK with default headers values
func NewPatchSearchIDOK() *PatchSearchIDOK {
	return &PatchSearchIDOK{}
}

/*PatchSearchIDOK handles this case with default header values.

The stream was created (or updated) successfully
*/
type PatchSearchIDOK struct {
}

func (o *PatchSearchIDOK) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/searches/{stream-id}][%d] patchSearchIdOK ", 200)
}

func (o *PatchSearchIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchSearchIDBadRequest creates a PatchSearchIDBadRequest with default headers values
func NewPatchSearchIDBadRequest() *PatchSearchIDBadRequest {
	return &PatchSearchIDBadRequest{}
}

/*PatchSearchIDBadRequest handles this case with default header values.

One or more parameter(s) are not valid
*/
type PatchSearchIDBadRequest struct {
}

func (o *PatchSearchIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/searches/{stream-id}][%d] patchSearchIdBadRequest ", 400)
}

func (o *PatchSearchIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchSearchIDUnauthorized creates a PatchSearchIDUnauthorized with default headers values
func NewPatchSearchIDUnauthorized() *PatchSearchIDUnauthorized {
	return &PatchSearchIDUnauthorized{}
}

/*PatchSearchIDUnauthorized handles this case with default header values.

The API Key does not provide access to this resource, or the organization name does not exist
*/
type PatchSearchIDUnauthorized struct {
}

func (o *PatchSearchIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/searches/{stream-id}][%d] patchSearchIdUnauthorized ", 401)
}

func (o *PatchSearchIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchSearchIDNotFound creates a PatchSearchIDNotFound with default headers values
func NewPatchSearchIDNotFound() *PatchSearchIDNotFound {
	return &PatchSearchIDNotFound{}
}

/*PatchSearchIDNotFound handles this case with default header values.

Project name is not found
*/
type PatchSearchIDNotFound struct {
}

func (o *PatchSearchIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/searches/{stream-id}][%d] patchSearchIdNotFound ", 404)
}

func (o *PatchSearchIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchSearchIDInternalServerError creates a PatchSearchIDInternalServerError with default headers values
func NewPatchSearchIDInternalServerError() *PatchSearchIDInternalServerError {
	return &PatchSearchIDInternalServerError{}
}

/*PatchSearchIDInternalServerError handles this case with default header values.

Stream identifier not found
*/
type PatchSearchIDInternalServerError struct {
}

func (o *PatchSearchIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/searches/{stream-id}][%d] patchSearchIdInternalServerError ", 500)
}

func (o *PatchSearchIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
