// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StreamAttributes stream attributes
// swagger:model streamAttributes
type StreamAttributes struct {

	// User who created stream
	CreatedBy string `json:"created-by,omitempty"`

	// Date+time stream was created
	// Format: date-time
	CreatedTime strfmt.DateTime `json:"created-time,omitempty"`

	// Custom JSON data that can be set by an end user and will be included in notifications.
	CustomData map[string]interface{} `json:"custom-data,omitempty"`

	// Name for the stream (free-form string)
	// Required: true
	Name *string `json:"name"`

	// The query string itself (see Query Syntax section for details).
	// Once a stream has been created, this string cannot be modified.
	// <b>Required when creating new streams.</b>
	Query string `json:"query,omitempty"`
}

// Validate validates this stream attributes
func (m *StreamAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StreamAttributes) validateCreatedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("created-time", "body", "date-time", m.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StreamAttributes) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StreamAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StreamAttributes) UnmarshalBinary(b []byte) error {
	var res StreamAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
