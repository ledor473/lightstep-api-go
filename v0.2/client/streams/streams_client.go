// Code generated by go-swagger; DO NOT EDIT.

package streams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new streams API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for streams API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteStreamID(params *DeleteStreamIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteStreamIDNoContent, error)

	GetStreamID(params *GetStreamIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetStreamIDOK, error)

	ListStreamsID(params *ListStreamsIDParams, authInfo runtime.ClientAuthInfoWriter) (*ListStreamsIDOK, error)

	PatchStreamID(params *PatchStreamIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchStreamIDOK, error)

	PostStreamID(params *PostStreamIDParams, authInfo runtime.ClientAuthInfoWriter) (*PostStreamIDOK, error)

	TimeseriesID(params *TimeseriesIDParams, authInfo runtime.ClientAuthInfoWriter) (*TimeseriesIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteStreamID deletes stream

  Deletes an existing stream. Deleting a stream also deletes all historical data persisted for that stream and cannot be undone, so be sure you want to delete it.
*/
func (a *Client) DeleteStreamID(params *DeleteStreamIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteStreamIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStreamIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStreamID",
		Method:             "DELETE",
		PathPattern:        "/{organization}/projects/{project}/streams/{stream-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteStreamIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStreamIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStreamID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStreamID gets stream

  Returns information about a specific stream
*/
func (a *Client) GetStreamID(params *GetStreamIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetStreamIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStreamIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStreamID",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/streams/{stream-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStreamIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStreamIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStreamID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListStreamsID lists streams

  Returns information about all streams in a project
*/
func (a *Client) ListStreamsID(params *ListStreamsIDParams, authInfo runtime.ClientAuthInfoWriter) (*ListStreamsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStreamsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStreamsID",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/streams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListStreamsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStreamsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listStreamsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchStreamID updates stream

  Modifies the settings for an existing stream, to provide more descriptive info about it. A clientID must be supplied. By default, streams are given the query parameters as the name and cannot be updated using the query field (results in a error).
*/
func (a *Client) PatchStreamID(params *PatchStreamIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchStreamIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStreamIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchStreamID",
		Method:             "PATCH",
		PathPattern:        "/{organization}/projects/{project}/streams/{stream-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchStreamIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStreamIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchStreamID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostStreamID creates stream

  Creates a new stream (or updates an existing stream if the query is identical). You do not need to include a clientID.
*/
func (a *Client) PostStreamID(params *PostStreamIDParams, authInfo runtime.ClientAuthInfoWriter) (*PostStreamIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStreamIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postStreamID",
		Method:             "POST",
		PathPattern:        "/{organization}/projects/{project}/streams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostStreamIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStreamIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postStreamID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TimeseriesID timeseries

  Returns timeseries data for a stream
*/
func (a *Client) TimeseriesID(params *TimeseriesIDParams, authInfo runtime.ClientAuthInfoWriter) (*TimeseriesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeseriesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "timeseriesID",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/streams/{stream-id}/timeseries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TimeseriesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeseriesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for timeseriesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
