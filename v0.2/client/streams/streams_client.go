// Code generated by go-swagger; DO NOT EDIT.

package streams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new streams API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for streams API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteStream(params *DeleteStreamParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteStreamNoContent, error)

	GetStream(params *GetStreamParams, authInfo runtime.ClientAuthInfoWriter) (*GetStreamOK, error)

	ListStreams(params *ListStreamsParams, authInfo runtime.ClientAuthInfoWriter) (*ListStreamsOK, error)

	PatchStream(params *PatchStreamParams, authInfo runtime.ClientAuthInfoWriter) (*PatchStreamOK, error)

	PostStream(params *PostStreamParams, authInfo runtime.ClientAuthInfoWriter) (*PostStreamOK, error)

	Timeseries(params *TimeseriesParams, authInfo runtime.ClientAuthInfoWriter) (*TimeseriesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteStream deletes stream

  Deletes an existing stream. Deleting a stream also deletes all historical data persisted for that stream and cannot be undone, so be sure you want to delete it.
*/
func (a *Client) DeleteStream(params *DeleteStreamParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteStreamNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStream",
		Method:             "DELETE",
		PathPattern:        "/{organization}/projects/{project}/streams/{stream-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteStreamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStreamNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStream gets stream

  Returns information about a specific stream
*/
func (a *Client) GetStream(params *GetStreamParams, authInfo runtime.ClientAuthInfoWriter) (*GetStreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStream",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/streams/{stream-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStreamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStreamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListStreams lists streams

  Returns information about all streams in a project
*/
func (a *Client) ListStreams(params *ListStreamsParams, authInfo runtime.ClientAuthInfoWriter) (*ListStreamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStreamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStreams",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/streams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListStreamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStreamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listStreams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchStream updates stream

  Modifies the settings for an existing stream, to provide more descriptive info about it. A clientID must be supplied. By default, streams are given the query parameters as the name and cannot be updated using the query field (results in a error).
*/
func (a *Client) PatchStream(params *PatchStreamParams, authInfo runtime.ClientAuthInfoWriter) (*PatchStreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchStream",
		Method:             "PATCH",
		PathPattern:        "/{organization}/projects/{project}/streams/{stream-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchStreamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStreamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchStream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostStream creates stream

  Creates a new stream (or updates an existing stream if the query is identical). You do not need to include a clientID.
*/
func (a *Client) PostStream(params *PostStreamParams, authInfo runtime.ClientAuthInfoWriter) (*PostStreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postStream",
		Method:             "POST",
		PathPattern:        "/{organization}/projects/{project}/streams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostStreamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStreamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postStream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Timeseries timeseries

  Returns timeseries data for a stream
*/
func (a *Client) Timeseries(params *TimeseriesParams, authInfo runtime.ClientAuthInfoWriter) (*TimeseriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeseriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "timeseries",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/streams/{stream-id}/timeseries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TimeseriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeseriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for timeseries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
