// Code generated by go-swagger; DO NOT EDIT.

package streams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// PatchStreamIDReader is a Reader for the PatchStreamID structure.
type PatchStreamIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchStreamIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchStreamIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchStreamIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchStreamIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchStreamIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchStreamIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchStreamIDOK creates a PatchStreamIDOK with default headers values
func NewPatchStreamIDOK() *PatchStreamIDOK {
	return &PatchStreamIDOK{}
}

/*PatchStreamIDOK handles this case with default header values.

The stream was created (or updated) successfully
*/
type PatchStreamIDOK struct {
}

func (o *PatchStreamIDOK) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/streams/{stream-id}][%d] patchStreamIdOK ", 200)
}

func (o *PatchStreamIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchStreamIDBadRequest creates a PatchStreamIDBadRequest with default headers values
func NewPatchStreamIDBadRequest() *PatchStreamIDBadRequest {
	return &PatchStreamIDBadRequest{}
}

/*PatchStreamIDBadRequest handles this case with default header values.

One or more parameter(s) are not valid
*/
type PatchStreamIDBadRequest struct {
}

func (o *PatchStreamIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/streams/{stream-id}][%d] patchStreamIdBadRequest ", 400)
}

func (o *PatchStreamIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchStreamIDUnauthorized creates a PatchStreamIDUnauthorized with default headers values
func NewPatchStreamIDUnauthorized() *PatchStreamIDUnauthorized {
	return &PatchStreamIDUnauthorized{}
}

/*PatchStreamIDUnauthorized handles this case with default header values.

The API Key does not provide access to this resource, or the organization name does not exist
*/
type PatchStreamIDUnauthorized struct {
}

func (o *PatchStreamIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/streams/{stream-id}][%d] patchStreamIdUnauthorized ", 401)
}

func (o *PatchStreamIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchStreamIDNotFound creates a PatchStreamIDNotFound with default headers values
func NewPatchStreamIDNotFound() *PatchStreamIDNotFound {
	return &PatchStreamIDNotFound{}
}

/*PatchStreamIDNotFound handles this case with default header values.

Project name is not found
*/
type PatchStreamIDNotFound struct {
}

func (o *PatchStreamIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/streams/{stream-id}][%d] patchStreamIdNotFound ", 404)
}

func (o *PatchStreamIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchStreamIDInternalServerError creates a PatchStreamIDInternalServerError with default headers values
func NewPatchStreamIDInternalServerError() *PatchStreamIDInternalServerError {
	return &PatchStreamIDInternalServerError{}
}

/*PatchStreamIDInternalServerError handles this case with default header values.

Stream identifier not found
*/
type PatchStreamIDInternalServerError struct {
}

func (o *PatchStreamIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/streams/{stream-id}][%d] patchStreamIdInternalServerError ", 500)
}

func (o *PatchStreamIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
