// Code generated by go-swagger; DO NOT EDIT.

package streams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetStreamIDParams creates a new GetStreamIDParams object
// with the default values initialized.
func NewGetStreamIDParams() *GetStreamIDParams {
	var ()
	return &GetStreamIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetStreamIDParamsWithTimeout creates a new GetStreamIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetStreamIDParamsWithTimeout(timeout time.Duration) *GetStreamIDParams {
	var ()
	return &GetStreamIDParams{

		timeout: timeout,
	}
}

// NewGetStreamIDParamsWithContext creates a new GetStreamIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetStreamIDParamsWithContext(ctx context.Context) *GetStreamIDParams {
	var ()
	return &GetStreamIDParams{

		Context: ctx,
	}
}

// NewGetStreamIDParamsWithHTTPClient creates a new GetStreamIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetStreamIDParamsWithHTTPClient(client *http.Client) *GetStreamIDParams {
	var ()
	return &GetStreamIDParams{
		HTTPClient: client,
	}
}

/*GetStreamIDParams contains all the parameters to send to the API endpoint
for the get stream ID operation typically these are written to a http.Request
*/
type GetStreamIDParams struct {

	/*Organization
	  Name of the customer organization

	*/
	Organization string
	/*Project
	  Name of the customer project

	*/
	Project string
	/*StreamID
	  Stream identifier

	*/
	StreamID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get stream ID params
func (o *GetStreamIDParams) WithTimeout(timeout time.Duration) *GetStreamIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get stream ID params
func (o *GetStreamIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get stream ID params
func (o *GetStreamIDParams) WithContext(ctx context.Context) *GetStreamIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get stream ID params
func (o *GetStreamIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get stream ID params
func (o *GetStreamIDParams) WithHTTPClient(client *http.Client) *GetStreamIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get stream ID params
func (o *GetStreamIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrganization adds the organization to the get stream ID params
func (o *GetStreamIDParams) WithOrganization(organization string) *GetStreamIDParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get stream ID params
func (o *GetStreamIDParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the get stream ID params
func (o *GetStreamIDParams) WithProject(project string) *GetStreamIDParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the get stream ID params
func (o *GetStreamIDParams) SetProject(project string) {
	o.Project = project
}

// WithStreamID adds the streamID to the get stream ID params
func (o *GetStreamIDParams) WithStreamID(streamID string) *GetStreamIDParams {
	o.SetStreamID(streamID)
	return o
}

// SetStreamID adds the streamId to the get stream ID params
func (o *GetStreamIDParams) SetStreamID(streamID string) {
	o.StreamID = streamID
}

// WriteToRequest writes these params to a swagger request
func (o *GetStreamIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	// path param stream-id
	if err := r.SetPathParam("stream-id", o.StreamID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
