// Code generated by go-swagger; DO NOT EDIT.

package streams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// TimeseriesReader is a Reader for the Timeseries structure.
type TimeseriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TimeseriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTimeseriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTimeseriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewTimeseriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTimeseriesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTimeseriesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTimeseriesOK creates a TimeseriesOK with default headers values
func NewTimeseriesOK() *TimeseriesOK {
	return &TimeseriesOK{}
}

/*TimeseriesOK handles this case with default header values.

JSON representation of a timeseries
*/
type TimeseriesOK struct {
	Payload interface{}
}

func (o *TimeseriesOK) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}/streams/{stream-id}/timeseries][%d] timeseriesOK  %+v", 200, o.Payload)
}

func (o *TimeseriesOK) GetPayload() interface{} {
	return o.Payload
}

func (o *TimeseriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTimeseriesBadRequest creates a TimeseriesBadRequest with default headers values
func NewTimeseriesBadRequest() *TimeseriesBadRequest {
	return &TimeseriesBadRequest{}
}

/*TimeseriesBadRequest handles this case with default header values.

One or more of the request parameter(s) is not valid
*/
type TimeseriesBadRequest struct {
	Payload interface{}
}

func (o *TimeseriesBadRequest) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}/streams/{stream-id}/timeseries][%d] timeseriesBadRequest  %+v", 400, o.Payload)
}

func (o *TimeseriesBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *TimeseriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTimeseriesUnauthorized creates a TimeseriesUnauthorized with default headers values
func NewTimeseriesUnauthorized() *TimeseriesUnauthorized {
	return &TimeseriesUnauthorized{}
}

/*TimeseriesUnauthorized handles this case with default header values.

The API Key does not provide access to this resource
*/
type TimeseriesUnauthorized struct {
	Payload interface{}
}

func (o *TimeseriesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}/streams/{stream-id}/timeseries][%d] timeseriesUnauthorized  %+v", 401, o.Payload)
}

func (o *TimeseriesUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *TimeseriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTimeseriesNotFound creates a TimeseriesNotFound with default headers values
func NewTimeseriesNotFound() *TimeseriesNotFound {
	return &TimeseriesNotFound{}
}

/*TimeseriesNotFound handles this case with default header values.

Project name is not found
*/
type TimeseriesNotFound struct {
	Payload interface{}
}

func (o *TimeseriesNotFound) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}/streams/{stream-id}/timeseries][%d] timeseriesNotFound  %+v", 404, o.Payload)
}

func (o *TimeseriesNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *TimeseriesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTimeseriesInternalServerError creates a TimeseriesInternalServerError with default headers values
func NewTimeseriesInternalServerError() *TimeseriesInternalServerError {
	return &TimeseriesInternalServerError{}
}

/*TimeseriesInternalServerError handles this case with default header values.

Stream ID is not valid, or other internal error
*/
type TimeseriesInternalServerError struct {
	Payload interface{}
}

func (o *TimeseriesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}/streams/{stream-id}/timeseries][%d] timeseriesInternalServerError  %+v", 500, o.Payload)
}

func (o *TimeseriesInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *TimeseriesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
