// Code generated by go-swagger; DO NOT EDIT.

package conditions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// ListConditionsForStreamIDReader is a Reader for the ListConditionsForStreamID structure.
type ListConditionsForStreamIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListConditionsForStreamIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListConditionsForStreamIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListConditionsForStreamIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListConditionsForStreamIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListConditionsForStreamIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListConditionsForStreamIDOK creates a ListConditionsForStreamIDOK with default headers values
func NewListConditionsForStreamIDOK() *ListConditionsForStreamIDOK {
	return &ListConditionsForStreamIDOK{}
}

/*ListConditionsForStreamIDOK handles this case with default header values.

JSON-formatted metadata about all conditions in the given stream
*/
type ListConditionsForStreamIDOK struct {
}

func (o *ListConditionsForStreamIDOK) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}/streams/{stream-id}/conditions][%d] listConditionsForStreamIdOK ", 200)
}

func (o *ListConditionsForStreamIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListConditionsForStreamIDUnauthorized creates a ListConditionsForStreamIDUnauthorized with default headers values
func NewListConditionsForStreamIDUnauthorized() *ListConditionsForStreamIDUnauthorized {
	return &ListConditionsForStreamIDUnauthorized{}
}

/*ListConditionsForStreamIDUnauthorized handles this case with default header values.

The API Key does not provide access to this resource, or the organization name does not exist
*/
type ListConditionsForStreamIDUnauthorized struct {
}

func (o *ListConditionsForStreamIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}/streams/{stream-id}/conditions][%d] listConditionsForStreamIdUnauthorized ", 401)
}

func (o *ListConditionsForStreamIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListConditionsForStreamIDNotFound creates a ListConditionsForStreamIDNotFound with default headers values
func NewListConditionsForStreamIDNotFound() *ListConditionsForStreamIDNotFound {
	return &ListConditionsForStreamIDNotFound{}
}

/*ListConditionsForStreamIDNotFound handles this case with default header values.

Project name is not found
*/
type ListConditionsForStreamIDNotFound struct {
}

func (o *ListConditionsForStreamIDNotFound) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}/streams/{stream-id}/conditions][%d] listConditionsForStreamIdNotFound ", 404)
}

func (o *ListConditionsForStreamIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListConditionsForStreamIDInternalServerError creates a ListConditionsForStreamIDInternalServerError with default headers values
func NewListConditionsForStreamIDInternalServerError() *ListConditionsForStreamIDInternalServerError {
	return &ListConditionsForStreamIDInternalServerError{}
}

/*ListConditionsForStreamIDInternalServerError handles this case with default header values.

The stream identifier is not valid
*/
type ListConditionsForStreamIDInternalServerError struct {
}

func (o *ListConditionsForStreamIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}/streams/{stream-id}/conditions][%d] listConditionsForStreamIdInternalServerError ", 500)
}

func (o *ListConditionsForStreamIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
