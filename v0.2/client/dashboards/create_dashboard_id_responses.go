// Code generated by go-swagger; DO NOT EDIT.

package dashboards

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// CreateDashboardIDReader is a Reader for the CreateDashboardID structure.
type CreateDashboardIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateDashboardIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateDashboardIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateDashboardIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateDashboardIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateDashboardIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateDashboardIDOK creates a CreateDashboardIDOK with default headers values
func NewCreateDashboardIDOK() *CreateDashboardIDOK {
	return &CreateDashboardIDOK{}
}

/*CreateDashboardIDOK handles this case with default header values.

The dashboard was created (or updated) successfully
*/
type CreateDashboardIDOK struct {
}

func (o *CreateDashboardIDOK) Error() string {
	return fmt.Sprintf("[POST /{organization}/projects/{project}/dashboards][%d] createDashboardIdOK ", 200)
}

func (o *CreateDashboardIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateDashboardIDBadRequest creates a CreateDashboardIDBadRequest with default headers values
func NewCreateDashboardIDBadRequest() *CreateDashboardIDBadRequest {
	return &CreateDashboardIDBadRequest{}
}

/*CreateDashboardIDBadRequest handles this case with default header values.

No organization parameter provided
*/
type CreateDashboardIDBadRequest struct {
}

func (o *CreateDashboardIDBadRequest) Error() string {
	return fmt.Sprintf("[POST /{organization}/projects/{project}/dashboards][%d] createDashboardIdBadRequest ", 400)
}

func (o *CreateDashboardIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateDashboardIDUnauthorized creates a CreateDashboardIDUnauthorized with default headers values
func NewCreateDashboardIDUnauthorized() *CreateDashboardIDUnauthorized {
	return &CreateDashboardIDUnauthorized{}
}

/*CreateDashboardIDUnauthorized handles this case with default header values.

The API Key does not provide access to this resource, or the organization name does not exist
*/
type CreateDashboardIDUnauthorized struct {
}

func (o *CreateDashboardIDUnauthorized) Error() string {
	return fmt.Sprintf("[POST /{organization}/projects/{project}/dashboards][%d] createDashboardIdUnauthorized ", 401)
}

func (o *CreateDashboardIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateDashboardIDNotFound creates a CreateDashboardIDNotFound with default headers values
func NewCreateDashboardIDNotFound() *CreateDashboardIDNotFound {
	return &CreateDashboardIDNotFound{}
}

/*CreateDashboardIDNotFound handles this case with default header values.

Project name is not found
*/
type CreateDashboardIDNotFound struct {
}

func (o *CreateDashboardIDNotFound) Error() string {
	return fmt.Sprintf("[POST /{organization}/projects/{project}/dashboards][%d] createDashboardIdNotFound ", 404)
}

func (o *CreateDashboardIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
