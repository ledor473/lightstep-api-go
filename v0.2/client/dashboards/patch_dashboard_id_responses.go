// Code generated by go-swagger; DO NOT EDIT.

package dashboards

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// PatchDashboardIDReader is a Reader for the PatchDashboardID structure.
type PatchDashboardIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchDashboardIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchDashboardIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchDashboardIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchDashboardIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchDashboardIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchDashboardIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchDashboardIDOK creates a PatchDashboardIDOK with default headers values
func NewPatchDashboardIDOK() *PatchDashboardIDOK {
	return &PatchDashboardIDOK{}
}

/*PatchDashboardIDOK handles this case with default header values.

The dashboard was updated successfully
*/
type PatchDashboardIDOK struct {
}

func (o *PatchDashboardIDOK) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/dashboards/{dashboard-id}][%d] patchDashboardIdOK ", 200)
}

func (o *PatchDashboardIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchDashboardIDBadRequest creates a PatchDashboardIDBadRequest with default headers values
func NewPatchDashboardIDBadRequest() *PatchDashboardIDBadRequest {
	return &PatchDashboardIDBadRequest{}
}

/*PatchDashboardIDBadRequest handles this case with default header values.

One or more parameter(s) are not valid
*/
type PatchDashboardIDBadRequest struct {
}

func (o *PatchDashboardIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/dashboards/{dashboard-id}][%d] patchDashboardIdBadRequest ", 400)
}

func (o *PatchDashboardIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchDashboardIDUnauthorized creates a PatchDashboardIDUnauthorized with default headers values
func NewPatchDashboardIDUnauthorized() *PatchDashboardIDUnauthorized {
	return &PatchDashboardIDUnauthorized{}
}

/*PatchDashboardIDUnauthorized handles this case with default header values.

The API Key does not provide access to this resource, or the organization name does not exist
*/
type PatchDashboardIDUnauthorized struct {
}

func (o *PatchDashboardIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/dashboards/{dashboard-id}][%d] patchDashboardIdUnauthorized ", 401)
}

func (o *PatchDashboardIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchDashboardIDNotFound creates a PatchDashboardIDNotFound with default headers values
func NewPatchDashboardIDNotFound() *PatchDashboardIDNotFound {
	return &PatchDashboardIDNotFound{}
}

/*PatchDashboardIDNotFound handles this case with default header values.

Project name is not found
*/
type PatchDashboardIDNotFound struct {
}

func (o *PatchDashboardIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/dashboards/{dashboard-id}][%d] patchDashboardIdNotFound ", 404)
}

func (o *PatchDashboardIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchDashboardIDInternalServerError creates a PatchDashboardIDInternalServerError with default headers values
func NewPatchDashboardIDInternalServerError() *PatchDashboardIDInternalServerError {
	return &PatchDashboardIDInternalServerError{}
}

/*PatchDashboardIDInternalServerError handles this case with default header values.

Dashboard identifier not found
*/
type PatchDashboardIDInternalServerError struct {
}

func (o *PatchDashboardIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/dashboards/{dashboard-id}][%d] patchDashboardIdInternalServerError ", 500)
}

func (o *PatchDashboardIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
