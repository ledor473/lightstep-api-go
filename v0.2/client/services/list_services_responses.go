// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// ListServicesReader is a Reader for the ListServices structure.
type ListServicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListServicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListServicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListServicesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListServicesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListServicesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListServicesOK creates a ListServicesOK with default headers values
func NewListServicesOK() *ListServicesOK {
	return &ListServicesOK{}
}

/*ListServicesOK handles this case with default header values.

JSON-formatted metadata about all services reporting in the project
*/
type ListServicesOK struct {
	Payload interface{}
}

func (o *ListServicesOK) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}/directory/services][%d] listServicesOK  %+v", 200, o.Payload)
}

func (o *ListServicesOK) GetPayload() interface{} {
	return o.Payload
}

func (o *ListServicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListServicesBadRequest creates a ListServicesBadRequest with default headers values
func NewListServicesBadRequest() *ListServicesBadRequest {
	return &ListServicesBadRequest{}
}

/*ListServicesBadRequest handles this case with default header values.

One or more parameter(s) are not valid
*/
type ListServicesBadRequest struct {
	Payload interface{}
}

func (o *ListServicesBadRequest) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}/directory/services][%d] listServicesBadRequest  %+v", 400, o.Payload)
}

func (o *ListServicesBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *ListServicesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListServicesUnauthorized creates a ListServicesUnauthorized with default headers values
func NewListServicesUnauthorized() *ListServicesUnauthorized {
	return &ListServicesUnauthorized{}
}

/*ListServicesUnauthorized handles this case with default header values.

The API Key does not provide access to this resource, or the organization name does not exist
*/
type ListServicesUnauthorized struct {
	Payload interface{}
}

func (o *ListServicesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}/directory/services][%d] listServicesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListServicesUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *ListServicesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListServicesNotFound creates a ListServicesNotFound with default headers values
func NewListServicesNotFound() *ListServicesNotFound {
	return &ListServicesNotFound{}
}

/*ListServicesNotFound handles this case with default header values.

Project name is not found
*/
type ListServicesNotFound struct {
	Payload interface{}
}

func (o *ListServicesNotFound) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}/directory/services][%d] listServicesNotFound  %+v", 404, o.Payload)
}

func (o *ListServicesNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *ListServicesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
