// Code generated by go-swagger; DO NOT EDIT.

package workflow_links

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// PatchWorkflowLinkIDReader is a Reader for the PatchWorkflowLinkID structure.
type PatchWorkflowLinkIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchWorkflowLinkIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchWorkflowLinkIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchWorkflowLinkIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchWorkflowLinkIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchWorkflowLinkIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchWorkflowLinkIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchWorkflowLinkIDOK creates a PatchWorkflowLinkIDOK with default headers values
func NewPatchWorkflowLinkIDOK() *PatchWorkflowLinkIDOK {
	return &PatchWorkflowLinkIDOK{}
}

/*PatchWorkflowLinkIDOK handles this case with default header values.

The workflow link was updated successfully
*/
type PatchWorkflowLinkIDOK struct {
}

func (o *PatchWorkflowLinkIDOK) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/wf_links/{link-id}][%d] patchWorkflowLinkIdOK ", 200)
}

func (o *PatchWorkflowLinkIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchWorkflowLinkIDBadRequest creates a PatchWorkflowLinkIDBadRequest with default headers values
func NewPatchWorkflowLinkIDBadRequest() *PatchWorkflowLinkIDBadRequest {
	return &PatchWorkflowLinkIDBadRequest{}
}

/*PatchWorkflowLinkIDBadRequest handles this case with default header values.

Bad request - could not decode JSON request
*/
type PatchWorkflowLinkIDBadRequest struct {
}

func (o *PatchWorkflowLinkIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/wf_links/{link-id}][%d] patchWorkflowLinkIdBadRequest ", 400)
}

func (o *PatchWorkflowLinkIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchWorkflowLinkIDUnauthorized creates a PatchWorkflowLinkIDUnauthorized with default headers values
func NewPatchWorkflowLinkIDUnauthorized() *PatchWorkflowLinkIDUnauthorized {
	return &PatchWorkflowLinkIDUnauthorized{}
}

/*PatchWorkflowLinkIDUnauthorized handles this case with default header values.

The API Key does not provide access to this resource
*/
type PatchWorkflowLinkIDUnauthorized struct {
}

func (o *PatchWorkflowLinkIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/wf_links/{link-id}][%d] patchWorkflowLinkIdUnauthorized ", 401)
}

func (o *PatchWorkflowLinkIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchWorkflowLinkIDForbidden creates a PatchWorkflowLinkIDForbidden with default headers values
func NewPatchWorkflowLinkIDForbidden() *PatchWorkflowLinkIDForbidden {
	return &PatchWorkflowLinkIDForbidden{}
}

/*PatchWorkflowLinkIDForbidden handles this case with default header values.

Unsupported request to create resource - links within the same project cannot have the same name and URL.
*/
type PatchWorkflowLinkIDForbidden struct {
}

func (o *PatchWorkflowLinkIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/wf_links/{link-id}][%d] patchWorkflowLinkIdForbidden ", 403)
}

func (o *PatchWorkflowLinkIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchWorkflowLinkIDNotFound creates a PatchWorkflowLinkIDNotFound with default headers values
func NewPatchWorkflowLinkIDNotFound() *PatchWorkflowLinkIDNotFound {
	return &PatchWorkflowLinkIDNotFound{}
}

/*PatchWorkflowLinkIDNotFound handles this case with default header values.

Organization, project name, or workflow link ID is not found
*/
type PatchWorkflowLinkIDNotFound struct {
}

func (o *PatchWorkflowLinkIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/wf_links/{link-id}][%d] patchWorkflowLinkIdNotFound ", 404)
}

func (o *PatchWorkflowLinkIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
