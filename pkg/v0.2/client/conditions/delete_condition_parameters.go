// Code generated by go-swagger; DO NOT EDIT.

package conditions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteConditionParams creates a new DeleteConditionParams object
// with the default values initialized.
func NewDeleteConditionParams() *DeleteConditionParams {
	var ()
	return &DeleteConditionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteConditionParamsWithTimeout creates a new DeleteConditionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteConditionParamsWithTimeout(timeout time.Duration) *DeleteConditionParams {
	var ()
	return &DeleteConditionParams{

		timeout: timeout,
	}
}

// NewDeleteConditionParamsWithContext creates a new DeleteConditionParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteConditionParamsWithContext(ctx context.Context) *DeleteConditionParams {
	var ()
	return &DeleteConditionParams{

		Context: ctx,
	}
}

// NewDeleteConditionParamsWithHTTPClient creates a new DeleteConditionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteConditionParamsWithHTTPClient(client *http.Client) *DeleteConditionParams {
	var ()
	return &DeleteConditionParams{
		HTTPClient: client,
	}
}

/*DeleteConditionParams contains all the parameters to send to the API endpoint
for the delete condition operation typically these are written to a http.Request
*/
type DeleteConditionParams struct {

	/*ConditionID
	  Identifier of the condition to delete

	*/
	ConditionID string
	/*Organization
	  Name of the customer organization

	*/
	Organization string
	/*Project
	  Name of the customer project

	*/
	Project string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete condition params
func (o *DeleteConditionParams) WithTimeout(timeout time.Duration) *DeleteConditionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete condition params
func (o *DeleteConditionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete condition params
func (o *DeleteConditionParams) WithContext(ctx context.Context) *DeleteConditionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete condition params
func (o *DeleteConditionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete condition params
func (o *DeleteConditionParams) WithHTTPClient(client *http.Client) *DeleteConditionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete condition params
func (o *DeleteConditionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConditionID adds the conditionID to the delete condition params
func (o *DeleteConditionParams) WithConditionID(conditionID string) *DeleteConditionParams {
	o.SetConditionID(conditionID)
	return o
}

// SetConditionID adds the conditionId to the delete condition params
func (o *DeleteConditionParams) SetConditionID(conditionID string) {
	o.ConditionID = conditionID
}

// WithOrganization adds the organization to the delete condition params
func (o *DeleteConditionParams) WithOrganization(organization string) *DeleteConditionParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the delete condition params
func (o *DeleteConditionParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the delete condition params
func (o *DeleteConditionParams) WithProject(project string) *DeleteConditionParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the delete condition params
func (o *DeleteConditionParams) SetProject(project string) {
	o.Project = project
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteConditionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param condition-id
	if err := r.SetPathParam("condition-id", o.ConditionID); err != nil {
		return err
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
