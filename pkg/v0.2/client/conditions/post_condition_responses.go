// Code generated by go-swagger; DO NOT EDIT.

package conditions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// PostConditionReader is a Reader for the PostCondition structure.
type PostConditionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostConditionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostConditionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPostConditionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostConditionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostConditionOK creates a PostConditionOK with default headers values
func NewPostConditionOK() *PostConditionOK {
	return &PostConditionOK{}
}

/*PostConditionOK handles this case with default header values.

The condition was created successfully
*/
type PostConditionOK struct {
	Payload interface{}
}

func (o *PostConditionOK) Error() string {
	return fmt.Sprintf("[POST /{organization}/projects/{project}/conditions][%d] postConditionOK  %+v", 200, o.Payload)
}

func (o *PostConditionOK) GetPayload() interface{} {
	return o.Payload
}

func (o *PostConditionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConditionUnauthorized creates a PostConditionUnauthorized with default headers values
func NewPostConditionUnauthorized() *PostConditionUnauthorized {
	return &PostConditionUnauthorized{}
}

/*PostConditionUnauthorized handles this case with default header values.

The API Key does not provide access to this resource, or the organization name does not exist
*/
type PostConditionUnauthorized struct {
	Payload interface{}
}

func (o *PostConditionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /{organization}/projects/{project}/conditions][%d] postConditionUnauthorized  %+v", 401, o.Payload)
}

func (o *PostConditionUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *PostConditionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostConditionNotFound creates a PostConditionNotFound with default headers values
func NewPostConditionNotFound() *PostConditionNotFound {
	return &PostConditionNotFound{}
}

/*PostConditionNotFound handles this case with default header values.

Project name is not found
*/
type PostConditionNotFound struct {
	Payload interface{}
}

func (o *PostConditionNotFound) Error() string {
	return fmt.Sprintf("[POST /{organization}/projects/{project}/conditions][%d] postConditionNotFound  %+v", 404, o.Payload)
}

func (o *PostConditionNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *PostConditionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
