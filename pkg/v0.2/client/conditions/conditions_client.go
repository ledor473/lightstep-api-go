// Code generated by go-swagger; DO NOT EDIT.

package conditions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the conditions client
type API interface {
	/*
	   DeleteCondition deletes condition

	   Deletes an existing condition*/
	DeleteCondition(ctx context.Context, params *DeleteConditionParams) (*DeleteConditionNoContent, error)
	/*
	   GetCondition gets condition

	   Returns information about a specific condition. Include the organization, project, and condition identifier in the path parameter.*/
	GetCondition(ctx context.Context, params *GetConditionParams) (*GetConditionOK, error)
	/*
	   GetConditionStatus gets condition status

	   Returns status information about a specific condition*/
	GetConditionStatus(ctx context.Context, params *GetConditionStatusParams) (*GetConditionStatusOK, error)
	/*
	   ListConditions lists conditions

	   Returns information about all conditions in a project*/
	ListConditions(ctx context.Context, params *ListConditionsParams) (*ListConditionsOK, error)
	/*
	   ListConditionsForStream lists conditions for stream

	   Returns information about all conditions in a specific stream. You can create multiple conditions for a Stream. For example, you might create one condition for a "warning" threshold and another for a "critical" threshold. Or, you might want to have different thresholds for multiple percentiles (e.g., the 99th percentile can exceed 100ms, but your 50th percentile should never exceed 50ms).*/
	ListConditionsForStream(ctx context.Context, params *ListConditionsForStreamParams) (*ListConditionsForStreamOK, error)
	/*
	   PatchCondition updates condition

	   Modifies the settings for an existing condition. You cannot modify the condition to refer to a different stream.*/
	PatchCondition(ctx context.Context, params *PatchConditionParams) (*PatchConditionOK, error)
	/*
	   PostCondition creates condition

	   Creates a new condition. You create conditions for thresholds that mark [SLAs or metrics](https://docs.lightstep.com/docs/create-alert-conditions-and-rules) on a Stream that you want to be warned about.*/
	PostCondition(ctx context.Context, params *PostConditionParams) (*PostConditionOK, error)
}

// New creates a new conditions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for conditions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteCondition deletes condition

Deletes an existing condition
*/
func (a *Client) DeleteCondition(ctx context.Context, params *DeleteConditionParams) (*DeleteConditionNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCondition",
		Method:             "DELETE",
		PathPattern:        "/{organization}/projects/{project}/conditions/{condition-id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteConditionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteConditionNoContent), nil

}

/*
GetCondition gets condition

Returns information about a specific condition. Include the organization, project, and condition identifier in the path parameter.
*/
func (a *Client) GetCondition(ctx context.Context, params *GetConditionParams) (*GetConditionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCondition",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/conditions/{condition-id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetConditionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConditionOK), nil

}

/*
GetConditionStatus gets condition status

Returns status information about a specific condition
*/
func (a *Client) GetConditionStatus(ctx context.Context, params *GetConditionStatusParams) (*GetConditionStatusOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConditionStatus",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/conditions/{condition-id}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetConditionStatusReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConditionStatusOK), nil

}

/*
ListConditions lists conditions

Returns information about all conditions in a project
*/
func (a *Client) ListConditions(ctx context.Context, params *ListConditionsParams) (*ListConditionsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listConditions",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/conditions",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListConditionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListConditionsOK), nil

}

/*
ListConditionsForStream lists conditions for stream

Returns information about all conditions in a specific stream. You can create multiple conditions for a Stream. For example, you might create one condition for a "warning" threshold and another for a "critical" threshold. Or, you might want to have different thresholds for multiple percentiles (e.g., the 99th percentile can exceed 100ms, but your 50th percentile should never exceed 50ms).
*/
func (a *Client) ListConditionsForStream(ctx context.Context, params *ListConditionsForStreamParams) (*ListConditionsForStreamOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listConditionsForStream",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/streams/{stream-id}/conditions",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListConditionsForStreamReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListConditionsForStreamOK), nil

}

/*
PatchCondition updates condition

Modifies the settings for an existing condition. You cannot modify the condition to refer to a different stream.
*/
func (a *Client) PatchCondition(ctx context.Context, params *PatchConditionParams) (*PatchConditionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCondition",
		Method:             "PATCH",
		PathPattern:        "/{organization}/projects/{project}/conditions/{condition-id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchConditionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchConditionOK), nil

}

/*
PostCondition creates condition

Creates a new condition. You create conditions for thresholds that mark [SLAs or metrics](https://docs.lightstep.com/docs/create-alert-conditions-and-rules) on a Stream that you want to be warned about.
*/
func (a *Client) PostCondition(ctx context.Context, params *PostConditionParams) (*PostConditionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postCondition",
		Method:             "POST",
		PathPattern:        "/{organization}/projects/{project}/conditions",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostConditionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostConditionOK), nil

}
