// Code generated by go-swagger; DO NOT EDIT.

package dashboards

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ledor473/lightstep-api-go/pkg/v0.2/response"
)

// PatchDashboardReader is a Reader for the PatchDashboard structure.
type PatchDashboardReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchDashboardReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchDashboardOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchDashboardBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchDashboardUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchDashboardNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchDashboardInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchDashboardOK creates a PatchDashboardOK with default headers values
func NewPatchDashboardOK() *PatchDashboardOK {
	return &PatchDashboardOK{}
}

/*PatchDashboardOK handles this case with default header values.

The dashboard was updated successfully
*/
type PatchDashboardOK struct {
	Payload response.PatchDashboard
}

func (o *PatchDashboardOK) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/dashboards/{dashboard-id}][%d] patchDashboardOK  %+v", 200, o.Payload)
}

func (o *PatchDashboardOK) GetPayload() response.PatchDashboard {
	return o.Payload
}

func (o *PatchDashboardOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDashboardBadRequest creates a PatchDashboardBadRequest with default headers values
func NewPatchDashboardBadRequest() *PatchDashboardBadRequest {
	return &PatchDashboardBadRequest{}
}

/*PatchDashboardBadRequest handles this case with default header values.

One or more parameter(s) are not valid
*/
type PatchDashboardBadRequest struct {
}

func (o *PatchDashboardBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/dashboards/{dashboard-id}][%d] patchDashboardBadRequest ", 400)
}

func (o *PatchDashboardBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchDashboardUnauthorized creates a PatchDashboardUnauthorized with default headers values
func NewPatchDashboardUnauthorized() *PatchDashboardUnauthorized {
	return &PatchDashboardUnauthorized{}
}

/*PatchDashboardUnauthorized handles this case with default header values.

The API Key does not provide access to this resource, or the organization name does not exist
*/
type PatchDashboardUnauthorized struct {
}

func (o *PatchDashboardUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/dashboards/{dashboard-id}][%d] patchDashboardUnauthorized ", 401)
}

func (o *PatchDashboardUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchDashboardNotFound creates a PatchDashboardNotFound with default headers values
func NewPatchDashboardNotFound() *PatchDashboardNotFound {
	return &PatchDashboardNotFound{}
}

/*PatchDashboardNotFound handles this case with default header values.

Project name is not found
*/
type PatchDashboardNotFound struct {
}

func (o *PatchDashboardNotFound) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/dashboards/{dashboard-id}][%d] patchDashboardNotFound ", 404)
}

func (o *PatchDashboardNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchDashboardInternalServerError creates a PatchDashboardInternalServerError with default headers values
func NewPatchDashboardInternalServerError() *PatchDashboardInternalServerError {
	return &PatchDashboardInternalServerError{}
}

/*PatchDashboardInternalServerError handles this case with default header values.

Dashboard identifier not found
*/
type PatchDashboardInternalServerError struct {
}

func (o *PatchDashboardInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/dashboards/{dashboard-id}][%d] patchDashboardInternalServerError ", 500)
}

func (o *PatchDashboardInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
