// Code generated by go-swagger; DO NOT EDIT.

package dashboards

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the dashboards client
type API interface {
	/*
	   CreateDashboard creates dashboard

	   Creates a new dashboard, with inline stream definitions. Automatically creates the necessary streams if they do not already exist.*/
	CreateDashboard(ctx context.Context, params *CreateDashboardParams) (*CreateDashboardOK, error)
	/*
	   DeleteDashboard deletes dashboard

	   Deletes an existing dashboard. Deleting a dashboard only deletes the dashboard; the Streams are still available.*/
	DeleteDashboard(ctx context.Context, params *DeleteDashboardParams) (*DeleteDashboardNoContent, error)
	/*
	   GetDashboard gets dashboard

	   Returns complete information about a specific dashboard, including stream definitions*/
	GetDashboard(ctx context.Context, params *GetDashboardParams) (*GetDashboardOK, error)
	/*
	   ListDashboards lists dashboards

	   Returns information about all dashboards in a project*/
	ListDashboards(ctx context.Context, params *ListDashboardsParams) (*ListDashboardsOK, error)
	/*
	   PatchDashboard updates dashboard

	   Updates the dashboard with a new name (if applicable), and replaces the set of streams on the dashboard. Streams that are removed from the dashboard will not be deleted from the project. Streams that are not supplied are removed from the dashboard.*/
	PatchDashboard(ctx context.Context, params *PatchDashboardParams) (*PatchDashboardOK, error)
}

// New creates a new dashboards API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for dashboards API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
CreateDashboard creates dashboard

Creates a new dashboard, with inline stream definitions. Automatically creates the necessary streams if they do not already exist.
*/
func (a *Client) CreateDashboard(ctx context.Context, params *CreateDashboardParams) (*CreateDashboardOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDashboard",
		Method:             "POST",
		PathPattern:        "/{organization}/projects/{project}/dashboards",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateDashboardReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDashboardOK), nil

}

/*
DeleteDashboard deletes dashboard

Deletes an existing dashboard. Deleting a dashboard only deletes the dashboard; the Streams are still available.
*/
func (a *Client) DeleteDashboard(ctx context.Context, params *DeleteDashboardParams) (*DeleteDashboardNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDashboard",
		Method:             "DELETE",
		PathPattern:        "/{organization}/projects/{project}/dashboard/{dashboard-id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDashboardReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDashboardNoContent), nil

}

/*
GetDashboard gets dashboard

Returns complete information about a specific dashboard, including stream definitions
*/
func (a *Client) GetDashboard(ctx context.Context, params *GetDashboardParams) (*GetDashboardOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDashboard",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/dashboards/{dashboard-id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDashboardReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDashboardOK), nil

}

/*
ListDashboards lists dashboards

Returns information about all dashboards in a project
*/
func (a *Client) ListDashboards(ctx context.Context, params *ListDashboardsParams) (*ListDashboardsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDashboards",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/dashboards",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListDashboardsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListDashboardsOK), nil

}

/*
PatchDashboard updates dashboard

Updates the dashboard with a new name (if applicable), and replaces the set of streams on the dashboard. Streams that are removed from the dashboard will not be deleted from the project. Streams that are not supplied are removed from the dashboard.
*/
func (a *Client) PatchDashboard(ctx context.Context, params *PatchDashboardParams) (*PatchDashboardOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDashboard",
		Method:             "PATCH",
		PathPattern:        "/{organization}/projects/{project}/dashboards/{dashboard-id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchDashboardReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDashboardOK), nil

}
