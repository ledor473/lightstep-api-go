// Code generated by go-swagger; DO NOT EDIT.

package traces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewStoredTracesParams creates a new StoredTracesParams object
// with the default values initialized.
func NewStoredTracesParams() *StoredTracesParams {
	var ()
	return &StoredTracesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStoredTracesParamsWithTimeout creates a new StoredTracesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStoredTracesParamsWithTimeout(timeout time.Duration) *StoredTracesParams {
	var ()
	return &StoredTracesParams{

		timeout: timeout,
	}
}

// NewStoredTracesParamsWithContext creates a new StoredTracesParams object
// with the default values initialized, and the ability to set a context for a request
func NewStoredTracesParamsWithContext(ctx context.Context) *StoredTracesParams {
	var ()
	return &StoredTracesParams{

		Context: ctx,
	}
}

// NewStoredTracesParamsWithHTTPClient creates a new StoredTracesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStoredTracesParamsWithHTTPClient(client *http.Client) *StoredTracesParams {
	var ()
	return &StoredTracesParams{
		HTTPClient: client,
	}
}

/*StoredTracesParams contains all the parameters to send to the API endpoint
for the stored traces operation typically these are written to a http.Request
*/
type StoredTracesParams struct {

	/*Organization
	  Name of the customer organization

	*/
	Organization string
	/*Project
	  Name of the project that the trace belongs to

	*/
	Project string
	/*SpanID
	  Key that uniquely identifies a stored trace

	*/
	SpanID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the stored traces params
func (o *StoredTracesParams) WithTimeout(timeout time.Duration) *StoredTracesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stored traces params
func (o *StoredTracesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stored traces params
func (o *StoredTracesParams) WithContext(ctx context.Context) *StoredTracesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stored traces params
func (o *StoredTracesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stored traces params
func (o *StoredTracesParams) WithHTTPClient(client *http.Client) *StoredTracesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stored traces params
func (o *StoredTracesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrganization adds the organization to the stored traces params
func (o *StoredTracesParams) WithOrganization(organization string) *StoredTracesParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the stored traces params
func (o *StoredTracesParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithProject adds the project to the stored traces params
func (o *StoredTracesParams) WithProject(project string) *StoredTracesParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the stored traces params
func (o *StoredTracesParams) SetProject(project string) {
	o.Project = project
}

// WithSpanID adds the spanID to the stored traces params
func (o *StoredTracesParams) WithSpanID(spanID string) *StoredTracesParams {
	o.SetSpanID(spanID)
	return o
}

// SetSpanID adds the spanId to the stored traces params
func (o *StoredTracesParams) SetSpanID(spanID string) {
	o.SpanID = spanID
}

// WriteToRequest writes these params to a swagger request
func (o *StoredTracesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	// query param span-id
	qrSpanID := o.SpanID
	qSpanID := qrSpanID
	if qSpanID != "" {
		if err := r.SetQueryParam("span-id", qSpanID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
