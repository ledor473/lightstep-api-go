// Code generated by go-swagger; DO NOT EDIT.

package traces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// StoredTracesReader is a Reader for the StoredTraces structure.
type StoredTracesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StoredTracesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStoredTracesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStoredTracesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStoredTracesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewStoredTracesOK creates a StoredTracesOK with default headers values
func NewStoredTracesOK() *StoredTracesOK {
	return &StoredTracesOK{}
}

/*StoredTracesOK handles this case with default header values.

JSON representation of a stored trace
*/
type StoredTracesOK struct {
	Payload interface{}
}

func (o *StoredTracesOK) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}/stored-traces][%d] storedTracesOK  %+v", 200, o.Payload)
}

func (o *StoredTracesOK) GetPayload() interface{} {
	return o.Payload
}

func (o *StoredTracesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStoredTracesBadRequest creates a StoredTracesBadRequest with default headers values
func NewStoredTracesBadRequest() *StoredTracesBadRequest {
	return &StoredTracesBadRequest{}
}

/*StoredTracesBadRequest handles this case with default header values.

Missing required parameter
*/
type StoredTracesBadRequest struct {
	Payload interface{}
}

func (o *StoredTracesBadRequest) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}/stored-traces][%d] storedTracesBadRequest  %+v", 400, o.Payload)
}

func (o *StoredTracesBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *StoredTracesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStoredTracesNotFound creates a StoredTracesNotFound with default headers values
func NewStoredTracesNotFound() *StoredTracesNotFound {
	return &StoredTracesNotFound{}
}

/*StoredTracesNotFound handles this case with default header values.

No stored traces found
*/
type StoredTracesNotFound struct {
	Payload interface{}
}

func (o *StoredTracesNotFound) Error() string {
	return fmt.Sprintf("[GET /{organization}/projects/{project}/stored-traces][%d] storedTracesNotFound  %+v", 404, o.Payload)
}

func (o *StoredTracesNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *StoredTracesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
