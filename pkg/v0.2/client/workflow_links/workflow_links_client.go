// Code generated by go-swagger; DO NOT EDIT.

package workflow_links

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the workflow links client
type API interface {
	/*
	   CreateWorkflowLink creates workflow link

	   Creates a new workflow link. Links within a project must have a unique combination of Name and URL. Admin or Member privileges are required to create workflow links. Workflow name can also include [variables](https://docs.lightstep.com/docs/links-reference), allowing the link name to change dynamically based on the span being viewed.*/
	CreateWorkflowLink(ctx context.Context, params *CreateWorkflowLinkParams) (*CreateWorkflowLinkOK, error)
	/*
	   DeleteWorkflowLink deletes workflow link

	   Deletes an existing workflow link*/
	DeleteWorkflowLink(ctx context.Context, params *DeleteWorkflowLinkParams) (*DeleteWorkflowLinkNoContent, error)
	/*
	   GetWorkflowLink gets workflow link

	   Returns information on a specific workflow link definition within a project*/
	GetWorkflowLink(ctx context.Context, params *GetWorkflowLinkParams) (*GetWorkflowLinkOK, error)
	/*
	   ListWorkflowLinks lists workflow links

	   Returns information on all workflow link definitions within a project*/
	ListWorkflowLinks(ctx context.Context, params *ListWorkflowLinksParams) (*ListWorkflowLinksOK, error)
	/*
	   PatchWorkflowLink updates workflow link

	   Updates the workflow link with a new name or URL (if applicable), or replaces the set of rules on the workflow link. If a non-empty parameter (i.e., name, URL, or Rules) is provided, the field will be overwritten with the new value. Links within a project must have a unique combination of name and URL. Admin or Member privileges are required to update workflow links. Searches that are not supplied are removed from the workflow link.*/
	PatchWorkflowLink(ctx context.Context, params *PatchWorkflowLinkParams) (*PatchWorkflowLinkOK, error)
}

// New creates a new workflow links API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for workflow links API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
CreateWorkflowLink creates workflow link

Creates a new workflow link. Links within a project must have a unique combination of Name and URL. Admin or Member privileges are required to create workflow links. Workflow name can also include [variables](https://docs.lightstep.com/docs/links-reference), allowing the link name to change dynamically based on the span being viewed.
*/
func (a *Client) CreateWorkflowLink(ctx context.Context, params *CreateWorkflowLinkParams) (*CreateWorkflowLinkOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createWorkflowLink",
		Method:             "POST",
		PathPattern:        "/{organization}/projects/{project}/wf_links",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateWorkflowLinkReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateWorkflowLinkOK), nil

}

/*
DeleteWorkflowLink deletes workflow link

Deletes an existing workflow link
*/
func (a *Client) DeleteWorkflowLink(ctx context.Context, params *DeleteWorkflowLinkParams) (*DeleteWorkflowLinkNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkflowLink",
		Method:             "DELETE",
		PathPattern:        "/{organization}/projects/{project}/wf_links/{link-id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteWorkflowLinkReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWorkflowLinkNoContent), nil

}

/*
GetWorkflowLink gets workflow link

Returns information on a specific workflow link definition within a project
*/
func (a *Client) GetWorkflowLink(ctx context.Context, params *GetWorkflowLinkParams) (*GetWorkflowLinkOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkflowLink",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/wf_links/{link-id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWorkflowLinkReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkflowLinkOK), nil

}

/*
ListWorkflowLinks lists workflow links

Returns information on all workflow link definitions within a project
*/
func (a *Client) ListWorkflowLinks(ctx context.Context, params *ListWorkflowLinksParams) (*ListWorkflowLinksOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listWorkflowLinks",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/wf_links",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListWorkflowLinksReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListWorkflowLinksOK), nil

}

/*
PatchWorkflowLink updates workflow link

Updates the workflow link with a new name or URL (if applicable), or replaces the set of rules on the workflow link. If a non-empty parameter (i.e., name, URL, or Rules) is provided, the field will be overwritten with the new value. Links within a project must have a unique combination of name and URL. Admin or Member privileges are required to update workflow links. Searches that are not supplied are removed from the workflow link.
*/
func (a *Client) PatchWorkflowLink(ctx context.Context, params *PatchWorkflowLinkParams) (*PatchWorkflowLinkOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWorkflowLink",
		Method:             "PATCH",
		PathPattern:        "/{organization}/projects/{project}/wf_links/{link-id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchWorkflowLinkReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWorkflowLinkOK), nil

}
