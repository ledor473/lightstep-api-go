// Code generated by go-swagger; DO NOT EDIT.

package streams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ledor473/lightstep-api-go/pkg/v0.2/response"
)

// PatchStreamReader is a Reader for the PatchStream structure.
type PatchStreamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchStreamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchStreamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchStreamBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchStreamUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchStreamNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchStreamInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchStreamOK creates a PatchStreamOK with default headers values
func NewPatchStreamOK() *PatchStreamOK {
	return &PatchStreamOK{}
}

/*PatchStreamOK handles this case with default header values.

The stream was created (or updated) successfully
*/
type PatchStreamOK struct {
	Payload response.PatchStream
}

func (o *PatchStreamOK) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/streams/{stream-id}][%d] patchStreamOK  %+v", 200, o.Payload)
}

func (o *PatchStreamOK) GetPayload() response.PatchStream {
	return o.Payload
}

func (o *PatchStreamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchStreamBadRequest creates a PatchStreamBadRequest with default headers values
func NewPatchStreamBadRequest() *PatchStreamBadRequest {
	return &PatchStreamBadRequest{}
}

/*PatchStreamBadRequest handles this case with default header values.

One or more parameter(s) are not valid
*/
type PatchStreamBadRequest struct {
}

func (o *PatchStreamBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/streams/{stream-id}][%d] patchStreamBadRequest ", 400)
}

func (o *PatchStreamBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchStreamUnauthorized creates a PatchStreamUnauthorized with default headers values
func NewPatchStreamUnauthorized() *PatchStreamUnauthorized {
	return &PatchStreamUnauthorized{}
}

/*PatchStreamUnauthorized handles this case with default header values.

The API Key does not provide access to this resource, or the organization name does not exist
*/
type PatchStreamUnauthorized struct {
}

func (o *PatchStreamUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/streams/{stream-id}][%d] patchStreamUnauthorized ", 401)
}

func (o *PatchStreamUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchStreamNotFound creates a PatchStreamNotFound with default headers values
func NewPatchStreamNotFound() *PatchStreamNotFound {
	return &PatchStreamNotFound{}
}

/*PatchStreamNotFound handles this case with default header values.

Project name is not found
*/
type PatchStreamNotFound struct {
}

func (o *PatchStreamNotFound) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/streams/{stream-id}][%d] patchStreamNotFound ", 404)
}

func (o *PatchStreamNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchStreamInternalServerError creates a PatchStreamInternalServerError with default headers values
func NewPatchStreamInternalServerError() *PatchStreamInternalServerError {
	return &PatchStreamInternalServerError{}
}

/*PatchStreamInternalServerError handles this case with default header values.

Stream identifier not found
*/
type PatchStreamInternalServerError struct {
}

func (o *PatchStreamInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/streams/{stream-id}][%d] patchStreamInternalServerError ", 500)
}

func (o *PatchStreamInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
