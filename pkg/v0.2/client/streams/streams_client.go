// Code generated by go-swagger; DO NOT EDIT.

package streams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the streams client
type API interface {
	/*
	   DeleteStream deletes stream

	   Deletes an existing stream. Deleting a stream also deletes all historical data persisted for that stream and cannot be undone, so be sure you want to delete it.*/
	DeleteStream(ctx context.Context, params *DeleteStreamParams) (*DeleteStreamNoContent, error)
	/*
	   GetStream gets stream

	   Returns information about a specific stream*/
	GetStream(ctx context.Context, params *GetStreamParams) (*GetStreamOK, error)
	/*
	   ListStreams lists streams

	   Returns information about all streams in a project*/
	ListStreams(ctx context.Context, params *ListStreamsParams) (*ListStreamsOK, error)
	/*
	   PatchStream updates stream

	   Modifies the settings for an existing stream, to provide more descriptive info about it. A clientID must be supplied. By default, streams are given the query parameters as the name and cannot be updated using the query field (results in a error).*/
	PatchStream(ctx context.Context, params *PatchStreamParams) (*PatchStreamOK, error)
	/*
	   PostStream creates stream

	   Creates a new stream (or updates an existing stream if the query is identical). You do not need to include a clientID.*/
	PostStream(ctx context.Context, params *PostStreamParams) (*PostStreamOK, error)
	/*
	   Timeseries timeseries

	   Returns timeseries data for a stream*/
	Timeseries(ctx context.Context, params *TimeseriesParams) (*TimeseriesOK, error)
}

// New creates a new streams API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for streams API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteStream deletes stream

Deletes an existing stream. Deleting a stream also deletes all historical data persisted for that stream and cannot be undone, so be sure you want to delete it.
*/
func (a *Client) DeleteStream(ctx context.Context, params *DeleteStreamParams) (*DeleteStreamNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStream",
		Method:             "DELETE",
		PathPattern:        "/{organization}/projects/{project}/streams/{stream-id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteStreamReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteStreamNoContent), nil

}

/*
GetStream gets stream

Returns information about a specific stream
*/
func (a *Client) GetStream(ctx context.Context, params *GetStreamParams) (*GetStreamOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStream",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/streams/{stream-id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStreamReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStreamOK), nil

}

/*
ListStreams lists streams

Returns information about all streams in a project
*/
func (a *Client) ListStreams(ctx context.Context, params *ListStreamsParams) (*ListStreamsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStreams",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/streams",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListStreamsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListStreamsOK), nil

}

/*
PatchStream updates stream

Modifies the settings for an existing stream, to provide more descriptive info about it. A clientID must be supplied. By default, streams are given the query parameters as the name and cannot be updated using the query field (results in a error).
*/
func (a *Client) PatchStream(ctx context.Context, params *PatchStreamParams) (*PatchStreamOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchStream",
		Method:             "PATCH",
		PathPattern:        "/{organization}/projects/{project}/streams/{stream-id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchStreamReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchStreamOK), nil

}

/*
PostStream creates stream

Creates a new stream (or updates an existing stream if the query is identical). You do not need to include a clientID.
*/
func (a *Client) PostStream(ctx context.Context, params *PostStreamParams) (*PostStreamOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postStream",
		Method:             "POST",
		PathPattern:        "/{organization}/projects/{project}/streams",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostStreamReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostStreamOK), nil

}

/*
Timeseries timeseries

Returns timeseries data for a stream
*/
func (a *Client) Timeseries(ctx context.Context, params *TimeseriesParams) (*TimeseriesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "timeseries",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/streams/{stream-id}/timeseries",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TimeseriesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TimeseriesOK), nil

}
