// Code generated by go-swagger; DO NOT EDIT.

package streams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// PatchSearchReader is a Reader for the PatchSearch structure.
type PatchSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchSearchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchSearchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchSearchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchSearchOK creates a PatchSearchOK with default headers values
func NewPatchSearchOK() *PatchSearchOK {
	return &PatchSearchOK{}
}

/*PatchSearchOK handles this case with default header values.

The stream was created (or updated) successfully
*/
type PatchSearchOK struct {
	Payload interface{}
}

func (o *PatchSearchOK) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/searches/{stream-id}][%d] patchSearchOK  %+v", 200, o.Payload)
}

func (o *PatchSearchOK) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSearchBadRequest creates a PatchSearchBadRequest with default headers values
func NewPatchSearchBadRequest() *PatchSearchBadRequest {
	return &PatchSearchBadRequest{}
}

/*PatchSearchBadRequest handles this case with default header values.

One or more parameter(s) are not valid
*/
type PatchSearchBadRequest struct {
	Payload interface{}
}

func (o *PatchSearchBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/searches/{stream-id}][%d] patchSearchBadRequest  %+v", 400, o.Payload)
}

func (o *PatchSearchBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchSearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSearchUnauthorized creates a PatchSearchUnauthorized with default headers values
func NewPatchSearchUnauthorized() *PatchSearchUnauthorized {
	return &PatchSearchUnauthorized{}
}

/*PatchSearchUnauthorized handles this case with default header values.

The API Key does not provide access to this resource, or the organization name does not exist
*/
type PatchSearchUnauthorized struct {
	Payload interface{}
}

func (o *PatchSearchUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/searches/{stream-id}][%d] patchSearchUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchSearchUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchSearchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSearchNotFound creates a PatchSearchNotFound with default headers values
func NewPatchSearchNotFound() *PatchSearchNotFound {
	return &PatchSearchNotFound{}
}

/*PatchSearchNotFound handles this case with default header values.

Project name is not found
*/
type PatchSearchNotFound struct {
	Payload interface{}
}

func (o *PatchSearchNotFound) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/searches/{stream-id}][%d] patchSearchNotFound  %+v", 404, o.Payload)
}

func (o *PatchSearchNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchSearchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSearchInternalServerError creates a PatchSearchInternalServerError with default headers values
func NewPatchSearchInternalServerError() *PatchSearchInternalServerError {
	return &PatchSearchInternalServerError{}
}

/*PatchSearchInternalServerError handles this case with default header values.

Stream identifier not found
*/
type PatchSearchInternalServerError struct {
	Payload interface{}
}

func (o *PatchSearchInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /{organization}/projects/{project}/searches/{stream-id}][%d] patchSearchInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchSearchInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchSearchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
