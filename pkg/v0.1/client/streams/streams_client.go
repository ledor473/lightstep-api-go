// Code generated by go-swagger; DO NOT EDIT.

package streams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new streams API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for streams API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteSearch(params *DeleteSearchParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSearchNoContent, error)

	GetStream(params *GetStreamParams, authInfo runtime.ClientAuthInfoWriter) (*GetStreamOK, error)

	ListStreams(params *ListStreamsParams, authInfo runtime.ClientAuthInfoWriter) (*ListStreamsOK, error)

	PatchSearch(params *PatchSearchParams, authInfo runtime.ClientAuthInfoWriter) (*PatchSearchOK, error)

	PostSearch(params *PostSearchParams, authInfo runtime.ClientAuthInfoWriter) (*PostSearchOK, error)

	Timeseries(params *TimeseriesParams, authInfo runtime.ClientAuthInfoWriter) (*TimeseriesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteSearch deletes stream

  Deletes an existing stream
*/
func (a *Client) DeleteSearch(params *DeleteSearchParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSearchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSearch",
		Method:             "DELETE",
		PathPattern:        "/{organization}/projects/{project}/searches/{stream-id}",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSearchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStream gets stream

  Returns information about a specific stream
*/
func (a *Client) GetStream(params *GetStreamParams, authInfo runtime.ClientAuthInfoWriter) (*GetStreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStream",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/searches/{stream-id}",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStreamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStreamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListStreams lists streams

  Returns information about all streams in a project
*/
func (a *Client) ListStreams(params *ListStreamsParams, authInfo runtime.ClientAuthInfoWriter) (*ListStreamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStreamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStreams",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/searches",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListStreamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStreamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listStreams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchSearch updates stream

  Modifies the settings for an existing stream
*/
func (a *Client) PatchSearch(params *PatchSearchParams, authInfo runtime.ClientAuthInfoWriter) (*PatchSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSearch",
		Method:             "PATCH",
		PathPattern:        "/{organization}/projects/{project}/searches/{stream-id}",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostSearch creates stream

  Creates a new stream (or updates an existing stream if the query is identical)
*/
func (a *Client) PostSearch(params *PostSearchParams, authInfo runtime.ClientAuthInfoWriter) (*PostSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSearch",
		Method:             "POST",
		PathPattern:        "/{organization}/projects/{project}/searches",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Timeseries timeseries

  Returns timeseries data for a stream
*/
func (a *Client) Timeseries(params *TimeseriesParams, authInfo runtime.ClientAuthInfoWriter) (*TimeseriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTimeseriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "timeseries",
		Method:             "GET",
		PathPattern:        "/{organization}/projects/{project}/searches/{stream-id}/timeseries",
		ProducesMediaTypes: []string{"application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TimeseriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TimeseriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for timeseries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
