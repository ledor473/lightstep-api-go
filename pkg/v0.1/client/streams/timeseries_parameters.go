// Code generated by go-swagger; DO NOT EDIT.

package streams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTimeseriesParams creates a new TimeseriesParams object
// with the default values initialized.
func NewTimeseriesParams() *TimeseriesParams {
	var (
		includeErrorCountsDefault = int64(0)
		includeExemplarsDefault   = int64(0)
		includeOpsCountsDefault   = int64(0)
		resolutionMsDefault       = int64(60000)
	)
	return &TimeseriesParams{
		IncludeErrorCounts: &includeErrorCountsDefault,
		IncludeExemplars:   &includeExemplarsDefault,
		IncludeOpsCounts:   &includeOpsCountsDefault,
		ResolutionMs:       resolutionMsDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewTimeseriesParamsWithTimeout creates a new TimeseriesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTimeseriesParamsWithTimeout(timeout time.Duration) *TimeseriesParams {
	var (
		includeErrorCountsDefault = int64(0)
		includeExemplarsDefault   = int64(0)
		includeOpsCountsDefault   = int64(0)
		resolutionMsDefault       = int64(60000)
	)
	return &TimeseriesParams{
		IncludeErrorCounts: &includeErrorCountsDefault,
		IncludeExemplars:   &includeExemplarsDefault,
		IncludeOpsCounts:   &includeOpsCountsDefault,
		ResolutionMs:       resolutionMsDefault,

		timeout: timeout,
	}
}

// NewTimeseriesParamsWithContext creates a new TimeseriesParams object
// with the default values initialized, and the ability to set a context for a request
func NewTimeseriesParamsWithContext(ctx context.Context) *TimeseriesParams {
	var (
		includeErrorCountsDefault = int64(0)
		includeExemplarsDefault   = int64(0)
		includeOpsCountsDefault   = int64(0)
		resolutionMsDefault       = int64(60000)
	)
	return &TimeseriesParams{
		IncludeErrorCounts: &includeErrorCountsDefault,
		IncludeExemplars:   &includeExemplarsDefault,
		IncludeOpsCounts:   &includeOpsCountsDefault,
		ResolutionMs:       resolutionMsDefault,

		Context: ctx,
	}
}

// NewTimeseriesParamsWithHTTPClient creates a new TimeseriesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTimeseriesParamsWithHTTPClient(client *http.Client) *TimeseriesParams {
	var (
		includeErrorCountsDefault = int64(0)
		includeExemplarsDefault   = int64(0)
		includeOpsCountsDefault   = int64(0)
		resolutionMsDefault       = int64(60000)
	)
	return &TimeseriesParams{
		IncludeErrorCounts: &includeErrorCountsDefault,
		IncludeExemplars:   &includeExemplarsDefault,
		IncludeOpsCounts:   &includeOpsCountsDefault,
		ResolutionMs:       resolutionMsDefault,
		HTTPClient:         client,
	}
}

/*TimeseriesParams contains all the parameters to send to the API endpoint
for the timeseries operation typically these are written to a http.Request
*/
type TimeseriesParams struct {

	/*IncludeErrorCounts
	  Indicates whether the response should specify the number of spans with errors in each time window. 0=false, 1=true

	*/
	IncludeErrorCounts *int64
	/*IncludeExemplars
	  Boolean value that indicates whether the response should include example trace information for each time window. 0=false, 1=true

	*/
	IncludeExemplars *int64
	/*IncludeOpsCounts
	  Indicates whether the response should specify the number of spans represented by each time window. 0=false, 1=true

	*/
	IncludeOpsCounts *int64
	/*OldestTime
	  Beginning of the time range being queried, e.g. 2018-01-20T02:30:00-08:00

	*/
	OldestTime strfmt.DateTime
	/*Organization
	  Name of the customer organization

	*/
	Organization string
	/*Percentile
	  A (possibly) repeated field that indicates what latency percentiles to return for each time window, if any. Valid for values (0, 99.99].

	*/
	Percentile []float64
	/*Project
	  Name of the project that contains the stream

	*/
	Project string
	/*ResolutionMs
	  Length of time represented by each "point" (time window) in the timeseries, in milliseconds. The minimum value (highest resolution data) for this parameter is 60000 (representing 1 minute of data per point). Larger values will result in latency distributions being merged.

	*/
	ResolutionMs int64
	/*StreamID
	  The ID of the stream to fetch timeseries data for

	*/
	StreamID string
	/*YoungestTime
	  End of the time range being queried, e.g. 2018-01-22T06:30:00-08:00

	*/
	YoungestTime strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the timeseries params
func (o *TimeseriesParams) WithTimeout(timeout time.Duration) *TimeseriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the timeseries params
func (o *TimeseriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the timeseries params
func (o *TimeseriesParams) WithContext(ctx context.Context) *TimeseriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the timeseries params
func (o *TimeseriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the timeseries params
func (o *TimeseriesParams) WithHTTPClient(client *http.Client) *TimeseriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the timeseries params
func (o *TimeseriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeErrorCounts adds the includeErrorCounts to the timeseries params
func (o *TimeseriesParams) WithIncludeErrorCounts(includeErrorCounts *int64) *TimeseriesParams {
	o.SetIncludeErrorCounts(includeErrorCounts)
	return o
}

// SetIncludeErrorCounts adds the includeErrorCounts to the timeseries params
func (o *TimeseriesParams) SetIncludeErrorCounts(includeErrorCounts *int64) {
	o.IncludeErrorCounts = includeErrorCounts
}

// WithIncludeExemplars adds the includeExemplars to the timeseries params
func (o *TimeseriesParams) WithIncludeExemplars(includeExemplars *int64) *TimeseriesParams {
	o.SetIncludeExemplars(includeExemplars)
	return o
}

// SetIncludeExemplars adds the includeExemplars to the timeseries params
func (o *TimeseriesParams) SetIncludeExemplars(includeExemplars *int64) {
	o.IncludeExemplars = includeExemplars
}

// WithIncludeOpsCounts adds the includeOpsCounts to the timeseries params
func (o *TimeseriesParams) WithIncludeOpsCounts(includeOpsCounts *int64) *TimeseriesParams {
	o.SetIncludeOpsCounts(includeOpsCounts)
	return o
}

// SetIncludeOpsCounts adds the includeOpsCounts to the timeseries params
func (o *TimeseriesParams) SetIncludeOpsCounts(includeOpsCounts *int64) {
	o.IncludeOpsCounts = includeOpsCounts
}

// WithOldestTime adds the oldestTime to the timeseries params
func (o *TimeseriesParams) WithOldestTime(oldestTime strfmt.DateTime) *TimeseriesParams {
	o.SetOldestTime(oldestTime)
	return o
}

// SetOldestTime adds the oldestTime to the timeseries params
func (o *TimeseriesParams) SetOldestTime(oldestTime strfmt.DateTime) {
	o.OldestTime = oldestTime
}

// WithOrganization adds the organization to the timeseries params
func (o *TimeseriesParams) WithOrganization(organization string) *TimeseriesParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the timeseries params
func (o *TimeseriesParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithPercentile adds the percentile to the timeseries params
func (o *TimeseriesParams) WithPercentile(percentile []float64) *TimeseriesParams {
	o.SetPercentile(percentile)
	return o
}

// SetPercentile adds the percentile to the timeseries params
func (o *TimeseriesParams) SetPercentile(percentile []float64) {
	o.Percentile = percentile
}

// WithProject adds the project to the timeseries params
func (o *TimeseriesParams) WithProject(project string) *TimeseriesParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the timeseries params
func (o *TimeseriesParams) SetProject(project string) {
	o.Project = project
}

// WithResolutionMs adds the resolutionMs to the timeseries params
func (o *TimeseriesParams) WithResolutionMs(resolutionMs int64) *TimeseriesParams {
	o.SetResolutionMs(resolutionMs)
	return o
}

// SetResolutionMs adds the resolutionMs to the timeseries params
func (o *TimeseriesParams) SetResolutionMs(resolutionMs int64) {
	o.ResolutionMs = resolutionMs
}

// WithStreamID adds the streamID to the timeseries params
func (o *TimeseriesParams) WithStreamID(streamID string) *TimeseriesParams {
	o.SetStreamID(streamID)
	return o
}

// SetStreamID adds the streamId to the timeseries params
func (o *TimeseriesParams) SetStreamID(streamID string) {
	o.StreamID = streamID
}

// WithYoungestTime adds the youngestTime to the timeseries params
func (o *TimeseriesParams) WithYoungestTime(youngestTime strfmt.DateTime) *TimeseriesParams {
	o.SetYoungestTime(youngestTime)
	return o
}

// SetYoungestTime adds the youngestTime to the timeseries params
func (o *TimeseriesParams) SetYoungestTime(youngestTime strfmt.DateTime) {
	o.YoungestTime = youngestTime
}

// WriteToRequest writes these params to a swagger request
func (o *TimeseriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeErrorCounts != nil {

		// query param include-error-counts
		var qrIncludeErrorCounts int64
		if o.IncludeErrorCounts != nil {
			qrIncludeErrorCounts = *o.IncludeErrorCounts
		}
		qIncludeErrorCounts := swag.FormatInt64(qrIncludeErrorCounts)
		if qIncludeErrorCounts != "" {
			if err := r.SetQueryParam("include-error-counts", qIncludeErrorCounts); err != nil {
				return err
			}
		}

	}

	if o.IncludeExemplars != nil {

		// query param include-exemplars
		var qrIncludeExemplars int64
		if o.IncludeExemplars != nil {
			qrIncludeExemplars = *o.IncludeExemplars
		}
		qIncludeExemplars := swag.FormatInt64(qrIncludeExemplars)
		if qIncludeExemplars != "" {
			if err := r.SetQueryParam("include-exemplars", qIncludeExemplars); err != nil {
				return err
			}
		}

	}

	if o.IncludeOpsCounts != nil {

		// query param include-ops-counts
		var qrIncludeOpsCounts int64
		if o.IncludeOpsCounts != nil {
			qrIncludeOpsCounts = *o.IncludeOpsCounts
		}
		qIncludeOpsCounts := swag.FormatInt64(qrIncludeOpsCounts)
		if qIncludeOpsCounts != "" {
			if err := r.SetQueryParam("include-ops-counts", qIncludeOpsCounts); err != nil {
				return err
			}
		}

	}

	// query param oldest-time
	qrOldestTime := o.OldestTime
	qOldestTime := qrOldestTime.String()
	if qOldestTime != "" {
		if err := r.SetQueryParam("oldest-time", qOldestTime); err != nil {
			return err
		}
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	var valuesPercentile []string
	for _, v := range o.Percentile {
		valuesPercentile = append(valuesPercentile, swag.FormatFloat64(v))
	}

	joinedPercentile := swag.JoinByFormat(valuesPercentile, "multi")
	// query array param percentile
	if err := r.SetQueryParam("percentile", joinedPercentile...); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	// query param resolution-ms
	qrResolutionMs := o.ResolutionMs
	qResolutionMs := swag.FormatInt64(qrResolutionMs)
	if qResolutionMs != "" {
		if err := r.SetQueryParam("resolution-ms", qResolutionMs); err != nil {
			return err
		}
	}

	// path param stream-id
	if err := r.SetPathParam("stream-id", o.StreamID); err != nil {
		return err
	}

	// query param youngest-time
	qrYoungestTime := o.YoungestTime
	qYoungestTime := qrYoungestTime.String()
	if qYoungestTime != "" {
		if err := r.SetQueryParam("youngest-time", qYoungestTime); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
